diff --git a/node_modules/googlephotos/lib/media_items/index.js b/node_modules/googlephotos/lib/media_items/index.js
index 196df0f..8c4317f 100644
--- a/node_modules/googlephotos/lib/media_items/index.js
+++ b/node_modules/googlephotos/lib/media_items/index.js
@@ -1,7 +1,6 @@
 'use strict';
 
 const path = require('path');
-const chunk = require('lodash.chunk');
 const constants = require('../../constants/media_items');
 
 class MediaItems {
@@ -27,26 +26,33 @@ class MediaItems {
     })
   }
 
-  async uploadMultiple(albumId, files, directoryPath, requestDelay = 10000) {
+  async uploadMultiple(albumId, files, directoryPath) {
     const url = `${constants.BASE_PATH}/:batchCreate`;
-    const batchedFiles = chunk(files, 50);
-    for(const batch of batchedFiles) {
-      const newMediaItems = await Promise.all(batch.map(async (file) => {
-        let token = await this.transport.upload(file.name, path.join(directoryPath, file.name))
-        return {
-          description: file.description || "",
-          simpleMediaItem: {
-            uploadToken: token
-          }
+    let tokenToNames = {};
+    let nameToIds = {};
+    const newMediaItems = await Promise.all(files.map(async (file) => {
+      let token = await this.transport.upload(file.name, path.join(directoryPath, file.name));
+      tokenToNames[token] = file.name;
+      return {
+        description: file.description || "",
+        simpleMediaItem: {
+          uploadToken: token
+        }
+      }
+    }));
+    const newMediaItemResults = await this.transport.post(url, {
+      albumId: albumId || "",
+      newMediaItems
+    });
+    if(newMediaItemResults["newMediaItemResults"]){
+      for(let result of newMediaItemResults["newMediaItemResults"]){
+        if(result.mediaItem&&result.mediaItem.id){
+          nameToIds[tokenToNames[result.uploadToken]] = result.mediaItem.id;
         }
-      }))
-      this.transport.post(url, {
-        albumId: albumId || "",
-        newMediaItems
-      })
-      // google upload token generation seems to cap at ~500 requests per minute, this is a configurable workaround
-      await new Promise(resolve => setTimeout(resolve, requestDelay));
+      }
     }
+    return nameToIds;
+    // google upload token generation seems to cap at ~500 requests per minute, this is a configurable workaround
   }
 
 
